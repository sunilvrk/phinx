version: '3'

services:
  # PHP: this container contains the app
  app:
    build:
      context: phinx
      dockerfile: runtimes/8.1/Dockerfile
    restart: unless-stopped
    tty: true
    ports:
      - 9000:9000
    volumes:
      - ./:/var/www
      - ./phinx/runtimes/8.1/php.ini:/usr/local/etc/php/conf.d/local.ini
    user: www
    networks:
      - app-network
    depends_on:
      - db

  # Nginx webserver
  server:
    image: nginx:alpine
    restart: unless-stopped
    tty: true
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./:/var/www
      - ./phinx/nginx/conf.d/:/etc/nginx/conf.d
    networks:
      - app-network
    depends_on:
      - app

  # MySQL database
  db:
    image: mysql:8.0
    ports:
      - ${FORWARD_DB_PORT:-3306}:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_DATABASE: ${DB_DATABASE:-mysql_db}
      MYSQL_USER: ${DB_USERNAME:-db_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - app-network
  
  # PHP MyAdmin instance
  phpmyadmin:
    image: phpmyadmin
    depends_on:
      - db
    restart: always
    ports:
      - 8080:80
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret}
      UPLOAD_LIMIT: 2000M
    networks:
      - app-network

#  # Redis instance
#  redis:
#   image: redis:6.0
#   ports:
#     - ${REDIS_PORT:-6379}:6379
#   networks:
#     - app-network
#
#  # MongoDB
#  mongo:
#    image: mongo
#    restart: unless-stopped
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: example
#    networks:
#      - app-network
#
#  mongo-express:
#    image: mongo-express
#    restart: unless-stopped
#    ports:
#      - 8081:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: example
#      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
#    networks:
#      - app-network

# Docker network
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  dbdata:
    driver: local